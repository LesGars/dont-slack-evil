service: dont-slack-evil

provider:
  name: aws
  runtime: go1.x
  stage: dev
  profile: dont-slack-evil-hackaton

  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-example
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:CreateTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

package:
  exclude:
    - ./**
  include:
    - ./bin/**
    - ./data/**

custom:
  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}

functions:
  hello:
    handler: bin/hello
    events:
      - http:
          path: hello
          method: get
  messages:
    handler: bin/messages
    events:
      - http:
          path: messages
          method: post
    environment:
      SLACK_OAUTH_ACCESS_TOKEN: ${self:custom.secrets.SLACK_OAUTH_ACCESS_TOKEN}
      SLACK_BOT_USER_OAUTH_ACCESS_TOKEN: ${self:custom.secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN}
      SLACK_VERIFICATION_TOKEN: ${self:custom.secrets.SLACK_VERIFICATION_TOKEN}
  dynamodbExample:
    handler: bin/dynamodb-example
    events:
      - http:
          path: dynamodb-example
          method: get
  incomingWebhook:
    handler: bin/incoming-webhook
    events:
      - http:
          path: incoming-webhook
          method: get
    environment:
      SLACK_INCOMING_WEBHOOK_URL: ${self:custom.secrets.SLACK_INCOMING_WEBHOOK_URL}
